{"version":3,"file":"audioworklet-polyfill.js","sources":["../src/index.js","../src/realm.js"],"sourcesContent":["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport { Realm } from './realm';\n\nconst PARAMS = [];\nlet nextPort;\n\nif (typeof AudioWorkletNode !== 'function') {\n  self.AudioWorkletNode = function AudioWorkletNode (context, name, options) {\n    const processor = getProcessorsForContext(context)[name];\n    const outputChannels = options && options.outputChannelCount ? options.outputChannelCount[0] : 2;\n    const scriptProcessor = context.createScriptProcessor(undefined, 2, outputChannels);\n\n    scriptProcessor.parameters = new Map();\n    if (processor.properties) {\n      for (let i = 0; i < processor.properties.length; i++) {\n        const prop = processor.properties[i];\n        const node = context.createGain().gain;\n        node.value = prop.defaultValue;\n        // @TODO there's no good way to construct the proxy AudioParam here\n        scriptProcessor.parameters.set(prop.name, node);\n      }\n    }\n\n    const mc = new MessageChannel();\n    nextPort = mc.port2;\n    const inst = new processor.Processor(options || {});\n    nextPort = null;\n\n    scriptProcessor.port = mc.port1;\n    scriptProcessor.processor = processor;\n    scriptProcessor.instance = inst;\n    scriptProcessor.onaudioprocess = onAudioProcess;\n    return scriptProcessor;\n  };\n\n  Object.defineProperty((self.AudioContext || self.webkitAudioContext).prototype, 'audioWorklet', {\n    get () {\n      return this.$$audioWorklet || (this.$$audioWorklet = new self.AudioWorklet(this));\n    }\n  });\n\n  self.AudioWorklet = class AudioWorklet {\n    constructor (audioContext) {\n      this.$$context = audioContext;\n    }\n\n    addModule (url, options) {\n      return fetch(url).then(r => {\n        if (!r.ok) throw Error(r.status);\n        return r.text();\n      }).then(code => {\n        const context = {\n          sampleRate: 0,\n          currentTime: 0,\n          AudioWorkletProcessor () {\n            this.port = nextPort;\n          },\n          registerProcessor: (name, Processor) => {\n            const processors = getProcessorsForContext(this.$$context);\n            processors[name] = {\n              realm,\n              context,\n              Processor,\n              properties: Processor.parameterDescriptors || []\n            };\n          }\n        };\n        context.self = context;\n        const realm = new Realm(context, document.documentElement);\n        realm.exec(((options && options.transpile) || String)(code));\n        return null;\n      });\n    }\n  };\n}\n\nfunction onAudioProcess (e) {\n  const parameters = {};\n  let index = -1;\n  this.parameters.forEach((value, key) => {\n    const arr = PARAMS[++index] || (PARAMS[index] = new Float32Array(this.bufferSize));\n    // @TODO proper values here if possible\n    arr.fill(value.value);\n    parameters[key] = arr;\n  });\n  this.processor.realm.exec(\n    'self.sampleRate=sampleRate=' + this.context.sampleRate + ';' +\n    'self.currentTime=currentTime=' + this.context.currentTime\n  );\n  const inputs = channelToArray(e.inputBuffer);\n  const outputs = channelToArray(e.outputBuffer);\n  this.instance.process([inputs], [outputs], parameters);\n\n  // @todo - keepalive\n  // let ret = this.instance.process([inputs], [outputs], parameters);\n  // if (ret === true) { }\n}\n\nfunction channelToArray (ch) {\n  const out = [];\n  for (let i = 0; i < ch.numberOfChannels; i++) {\n    out[i] = ch.getChannelData(i);\n  }\n  return out;\n}\n\nfunction getProcessorsForContext (audioContext) {\n  return audioContext.$$processors || (audioContext.$$processors = {});\n}\n","/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nexport function Realm (scope, parentElement) {\n  const frame = document.createElement('iframe');\n  frame.style.cssText = 'position:absolute;left:0;top:-999px;width:1px;height:1px;';\n  parentElement.appendChild(frame);\n  const win = frame.contentWindow;\n  const doc = win.document;\n  let vars = 'var window,$hook';\n  for (const i in win) {\n    if (!(i in scope) && i !== 'eval') {\n      vars += ',';\n      vars += i;\n    }\n  }\n  for (const i in scope) {\n    vars += ',';\n    vars += i;\n    vars += '=self.';\n    vars += i;\n  }\n  const script = doc.createElement('script');\n  script.appendChild(doc.createTextNode(\n    `function $hook(self,console) {\"use strict\";\n        ${vars};return function() {return eval(arguments[0])}}`\n  ));\n  doc.body.appendChild(script);\n  this.exec = win.$hook(scope, console);\n}\n"],"names":["const","nextPort","PARAMS","onAudioProcess","e","parameters","index","this","forEach","value","key","arr","Float32Array","bufferSize","fill","processor","realm","exec","context","sampleRate","currentTime","inputs","channelToArray","inputBuffer","outputs","outputBuffer","instance","process","ch","out","i","numberOfChannels","getChannelData","getProcessorsForContext","audioContext","$$processors","AudioWorkletNode","self","name","options","scriptProcessor","createScriptProcessor","undefined","outputChannelCount","Map","properties","let","length","prop","node","createGain","gain","defaultValue","set","mc","MessageChannel","port2","inst","Processor","port","port1","onaudioprocess","Object","defineProperty","AudioContext","webkitAudioContext","prototype","get","$$audioWorklet","AudioWorklet","$$context","addModule","url","fetch","then","r","ok","Error","status","text","code","AudioWorkletProcessor","registerProcessor","parameterDescriptors","scope","parentElement","frame","document","createElement","style","cssText","appendChild","win","contentWindow","doc","vars","script","createTextNode","body","documentElement","transpile","String"],"mappings":"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"}